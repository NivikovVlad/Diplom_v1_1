import os
from aiogram import types

from Database.database import session
import process_photo
from Database.models import User, Referral
from TextForButtons import *
from ClasAndFunc import PhotoState, PhotoDescription, clear, send_photo, return_to_start
from keyboards import *


async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
    –ù–∞—á–∏—Å–ª—è–µ—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    """
    if len(message.text.split()) > 1:
        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º, –ø–æ —á—å–µ–π —Å—Å—ã–ª–∫–µ –º—ã –ø–µ—Ä–µ—à–ª–∏
        referrer_user_id = str(message.text.split()[1])
        # –ü–æ–ª—É—á–∞–µ–º id —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        referrer_bd_id = session.query(User.id).filter_by(user_id=referrer_user_id).first()[0]
    else:
        referrer_user_id = None
        referrer_bd_id = None

    user_id = str(message.from_user.id)
    username = message.from_user.username
    firstname = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    user = session.query(User).filter_by(user_id=user_id).first()
    if user is None:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_user = User(user_id=user_id, username=username, firstname=firstname)
        session.add(new_user)
        session.commit()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        if referrer_user_id is not None:
            # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            new_referral = Referral(user_id=new_user.id, referrer_id=referrer_bd_id)
            session.add(new_referral)
            # –ù–∞—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É –±–æ–Ω—É—Å
            session.query(User).filter_by(id=referrer_bd_id).update({User.balance: User.balance + 50})

        session.commit()

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {firstname}!\n'
                         f'{start}', reply_markup=start_kb)
    session.close()


async def request_photo(message: types.Message):
    """
    –ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ
    """
    user_id = str(message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–æ–∫ –µ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ
    balance = session.query(User.balance).filter_by(user_id=user_id).first()[0]
    await message.answer('üîÑ –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ...\n'
                         f'–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ {balance // 10} —Ñ–æ—Ç–æ')
    session.close()
    await PhotoState.photos.set()


async def get_photos(message: types.Message, album: list[types.Message] = None, state=PhotoState.photos):
    """
    –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö.
    :param album: –ú–∏–¥–ª–≤–∞—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∞–ª—å–±–æ–º –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
    :param state: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ photos
    """

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    os.makedirs(f'UserFiles/Photos_{user_id}', exist_ok=True)
    os.makedirs(f'UserFiles/ResultPhotos_{user_id}', exist_ok=True)
    if not album:
        album = [message]   # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –æ–¥–Ω–æ, —Ç–æ –∞–ª—å–±–æ–º —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    media_group = types.MediaGroup()    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    user_id = str(message.from_user.id)
    balance = session.query(User.balance).filter_by(user_id=user_id).first()[0]
    session.close()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
    if len(album) <= balance / 10:
        for file in album:
            # –ï—Å–ª–∏, –≤ –∞–ª—å–±–æ–º–µ –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –Ω–µ —Ñ–æ—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
            # –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ
            if file.photo:
                file_id = file.photo[-1].file_id
            else:
                await message.answer("üÜò –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ!\n"
                                     "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ", reply_markup=start_kb)

                await PhotoState.photos.set()
                PhotoDescription.description = []
                clear(user_id)
                return

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                file_path = f'UserFiles/Photos_{user_id}/{file_id}.jpg'
                if os.path.exists(file_path):
                    pass
                else:
                    await file.photo[-1].download(file_path)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                media_group.attach(types.InputMedia(media=file_id, type=file.content_type))

            except Exception as exc:
                session.close()
                await state.finish()
                PhotoDescription.description = []
                clear(user_id)
                await message.answer(str(exc), reply_markup=card_type_kb)
                return await message.answer("üÜò –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", reply_markup=start_kb)
    else:
        # session.close()
        await state.finish()
        PhotoDescription.description = []
        clear(user_id)
        return await message.answer(f"üÜò –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {balance // 10} —Ñ–æ—Ç–æ\n"
                                    f"  –í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ {len(album)} —Ñ–æ—Ç–æ", reply_markup=start_kb)

    await message.answer('üëå –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã...')

    await state.update_data(photos=[media_group, user_id])
    await message.answer('üéÜ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏:', reply_markup=card_type_kb)
    await PhotoState.type_card.set()


async def set_type_love_is(call, state):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    await state.update_data(type_card='love_is')
    await call.message.answer('üéÜ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: "Love is..."', reply_markup=confirm_type_kb)
    await call.answer()
    await PhotoState.descriptions.set()


async def set_type_friend_is(call, state):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    await state.update_data(type_card='friend_is')
    await call.message.answer('üéÜ –í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: "Friendship is..."', reply_markup=confirm_type_kb)
    await call.answer()
    await PhotoState.descriptions.set()


async def change_type(message: types.Message, state):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏
    """
    await state.update_data(type_card='')
    await message.answer('üéÜ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏:', reply_markup=card_type_kb)
    await PhotoState.type_card.set()


async def request_descriptions(message: types.Message, state):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ.
    :param message –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    data = await state.get_data()
    # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫
    photos = data['photos']

    if photos:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ send_photo
        first_photo = photos[0].media[0]['media']
        await send_photo(message, first_photo)
    else:
        await message.answer('üö´ –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.')


async def process_confirmation(message: types.Message, state):
    """
    –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_description.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –Ω–∞ –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å desc.
    –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å desc –≤ —Å–ø–∏—Å–æ–∫ PhotoDescription.description
    PhotoDescription.description - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏ –∏ –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = await state.get_data()
    remaining_photos = data.get('photos', [])   # –°–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ñ–æ—Ç–æ
    desc = {}   # –°–ª–æ–≤–∞—Ä—å. –ö–ª—é—á - id —Ñ–æ—Ç–æ, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫[–ø–æ–¥–ø–∏—Å—å, id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ–¥–Ω–æ
    if len(remaining_photos[0].media) == 1:
        current_photo = remaining_photos[0].media[0]['media']
        current_user_id = remaining_photos[1]
        desc[current_photo] = [message.text, current_user_id]
        PhotoDescription.description.append(desc)   # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π desc

        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å, —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        remaining_photos[0].media.remove(remaining_photos[0].media[0])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        await state.update_data(photos=remaining_photos)
        await message.answer('–§–æ—Ç–æ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ', reply_markup=proc_kb)
        # –ó–∞–Ω–æ—Å–∏–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ descriptions
        await state.update_data(descriptions=PhotoDescription.description)
        await PhotoState.process.set()

    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å—å
        next_photo = remaining_photos[0].media[1]['media']

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_photo = remaining_photos[0].media[0]['media']
        current_user_id = remaining_photos[1]
        desc[current_photo] = (message.text, current_user_id)
        PhotoDescription.description.append(desc)

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
        remaining_photos[0].media.remove(remaining_photos[0].media[0])
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        await state.update_data(photos=remaining_photos)
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∏
        await send_photo(message, next_photo)


async def get_result_photo(message: types.Message, state):
    user_id = message.from_user.id
    data = await state.get_data()
    photo_descriptions = data['descriptions']
    img_type = data['type_card']
    try:
        # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è descriptions (id —Ñ–æ—Ç–æ, –ø–æ–¥–ø–∏—Å—å, id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        for i in range(0, len(photo_descriptions)):
            for photo_id, photo_description in photo_descriptions[i].items():
                if str(photo_description[1]) == str(user_id):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    process_photo.set_new_image(photo_id, photo_description[0], img_type, user_id)
                    result_photo_path = f'UserFiles/ResultPhotos_{user_id}/{photo_id}.jpg'
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
                    # with open(result_photo_path, 'rb') as photo:
                    #     await message.answer_photo(photo, caption='üì∏ –¢–≤–æ—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.')

        # –°–Ω–∏–º–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∏–Ω—Ç—ã –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
        session.query(User).filter_by(user_id=str(user_id)).update(
            {User.balance: User.balance - len(photo_descriptions) * 10})
        # –°—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
        session.query(User).filter_by(user_id=str(user_id)).update(
            {User.total_uses: User.total_uses + len(photo_descriptions)})
        session.commit()
        session.close()

        # –ü–æ–ª—É—á–∏–º –ø—É—Ç—å –∫ pdf
        path_to_pdf_file = process_photo.get_pdf(user_id)
        await message.answer('‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!')
        with open(path_to_pdf_file, 'rb') as file:
            await message.answer_document(file, caption='üìë –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å')

    except Exception as exc:
        print(exc)
        await message.answer('üÜò –£–ø—Å! –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å', reply_markup=start_kb)

    finally:
        await return_to_start(state, user_id)
